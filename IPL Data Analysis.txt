

# Function for adding batting strike rate of columns for team1 and team2
def add_batting_strike_rate_cols():

 train_matches.loc[train_matches.team1=='Team1','batting_strike_rate_team1']=     151.470085
 train_matches.loc[train_matches.team1=='Team10','batting_strike_rate_team1']=    158.688073
 train_matches.loc[train_matches.team1=='Team11','batting_strike_rate_team1']=    135.785714
 train_matches.loc[train_matches.team1=='Team2','batting_strike_rate_team1']=     153.401639
 train_matches.loc[train_matches.team1=='Team3','batting_strike_rate_team1']=     172.285714
 train_matches.loc[train_matches.team1=='Team4','batting_strike_rate_team1']=     142.387097
 train_matches.loc[train_matches.team1=='Team5','batting_strike_rate_team1']=     150.982906
 train_matches.loc[train_matches.team1=='Team6','batting_strike_rate_team1']=     145.939130
 train_matches.loc[train_matches.team1=='Team7','batting_strike_rate_team1']=     148.655172
 train_matches.loc[train_matches.team1=='Team8','batting_strike_rate_team1']=     156.964602
 train_matches.loc[train_matches.team1=='Team9','batting_strike_rate_team1']=     149.059406
 
 train_matches.loc[train_matches.team2=='Team1','batting_strike_rate_team2']=     151.470085
 train_matches.loc[train_matches.team2=='Team10','batting_strike_rate_team2']=    158.688073
 train_matches.loc[train_matches.team2=='Team11','batting_strike_rate_team2']=    135.785714
 train_matches.loc[train_matches.team2=='Team2','batting_strike_rate_team2']=     153.401639
 train_matches.loc[train_matches.team2=='Team3','batting_strike_rate_team2']=     172.285714
 train_matches.loc[train_matches.team2=='Team4','batting_strike_rate_team2']=     142.387097
 train_matches.loc[train_matches.team2=='Team5','batting_strike_rate_team2']=     150.982906
 train_matches.loc[train_matches.team2=='Team6','batting_strike_rate_team2']=     145.939130
 train_matches.loc[train_matches.team2=='Team7','batting_strike_rate_team2']=     148.655172
 train_matches.loc[train_matches.team2=='Team8','batting_strike_rate_team2']=     156.964602
 train_matches.loc[train_matches.team2=='Team9','batting_strike_rate_team2']=     149.059406
 
 
# Function for adding bowling economy rate columns for team1 and team2
 
def add_bowling_economy_rate_cols():
 train_matches.loc[train_matches.team1=='Team1' ,'bowling_economy_rate_team1']= 7.841597
 train_matches.loc[train_matches.team1=='Team10','bowling_economy_rate_team1']= 7.783564
 train_matches.loc[train_matches.team1=='Team11','bowling_economy_rate_team1']= 7.580153
 train_matches.loc[train_matches.team1=='Team2' ,'bowling_economy_rate_team1']= 7.667795
 train_matches.loc[train_matches.team1=='Team3' ,'bowling_economy_rate_team1']= 9.264925
 train_matches.loc[train_matches.team1=='Team4' ,'bowling_economy_rate_team1']= 7.724855
 train_matches.loc[train_matches.team1=='Team5' ,'bowling_economy_rate_team1']= 8.043728
 train_matches.loc[train_matches.team1=='Team6' ,'bowling_economy_rate_team1']= 7.669859
 train_matches.loc[train_matches.team1=='Team7' ,'bowling_economy_rate_team1']= 8.091364
 train_matches.loc[train_matches.team1=='Team8' ,'bowling_economy_rate_team1']= 8.149745
 train_matches.loc[train_matches.team1=='Team9' ,'bowling_economy_rate_team1']= 7.663239
 
 train_matches.loc[train_matches.team2=='Team1' ,'bowling_economy_rate_team2']= 7.841597
 train_matches.loc[train_matches.team2=='Team10','bowling_economy_rate_team2']= 7.783564
 train_matches.loc[train_matches.team2=='Team11','bowling_economy_rate_team2']= 7.580153
 train_matches.loc[train_matches.team2=='Team2' ,'bowling_economy_rate_team2']= 7.667795
 train_matches.loc[train_matches.team2=='Team3' ,'bowling_economy_rate_team2']= 9.264925
 train_matches.loc[train_matches.team2=='Team4' ,'bowling_economy_rate_team2']= 7.724855
 train_matches.loc[train_matches.team2=='Team5' ,'bowling_economy_rate_team2']= 8.043728
 train_matches.loc[train_matches.team2=='Team6' ,'bowling_economy_rate_team2']= 7.669859
 train_matches.loc[train_matches.team2=='Team7' ,'bowling_economy_rate_team2']= 8.091364
 train_matches.loc[train_matches.team2=='Team8' ,'bowling_economy_rate_team2']= 8.149745
 train_matches.loc[train_matches.team2=='Team9' ,'bowling_economy_rate_team2']= 7.663239


# Function for adding batting powerplay columns for team1 and team2 
 
def add_power_play_strike_rate_cols():
 train_matches.loc[train_matches.team1=='Team1','power_play_scoring_rate_team1']=     7.475783
 train_matches.loc[train_matches.team1=='Team10','power_play_scoring_rate_team1']=    7.478593
 train_matches.loc[train_matches.team1=='Team11','power_play_scoring_rate_team1']=    8.095238
 train_matches.loc[train_matches.team1=='Team2','power_play_scoring_rate_team1']=     7.318306
 train_matches.loc[train_matches.team1=='Team3','power_play_scoring_rate_team1']=     9.083333
 train_matches.loc[train_matches.team1=='Team4','power_play_scoring_rate_team1']=     7.204301
 train_matches.loc[train_matches.team1=='Team5','power_play_scoring_rate_team1']=     7.148148
 train_matches.loc[train_matches.team1=='Team6','power_play_scoring_rate_team1']=     7.430435
 train_matches.loc[train_matches.team1=='Team7','power_play_scoring_rate_team1']=     7.666667
 train_matches.loc[train_matches.team1=='Team8','power_play_scoring_rate_team1']=     7.694690
 train_matches.loc[train_matches.team1=='Team9','power_play_scoring_rate_team1']=     7.194719
 
 train_matches.loc[train_matches.team2=='Team1','power_play_scoring_rate_team2']=     7.475783
 train_matches.loc[train_matches.team2=='Team10','power_play_scoring_rate_team2']=    7.478593
 train_matches.loc[train_matches.team2=='Team11','power_play_scoring_rate_team2']=    8.095238
 train_matches.loc[train_matches.team2=='Team2','power_play_scoring_rate_team2']=     7.318306
 train_matches.loc[train_matches.team2=='Team3','power_play_scoring_rate_team2']=     9.083333
 train_matches.loc[train_matches.team2=='Team4','power_play_scoring_rate_team2']=     7.204301
 train_matches.loc[train_matches.team2=='Team5','power_play_scoring_rate_team2']=     7.148148
 train_matches.loc[train_matches.team2=='Team6','power_play_scoring_rate_team2']=     7.430435
 train_matches.loc[train_matches.team2=='Team7','power_play_scoring_rate_team2']=     7.666667
 train_matches.loc[train_matches.team2=='Team8','power_play_scoring_rate_team2']=     7.694690
 train_matches.loc[train_matches.team2=='Team9','power_play_scoring_rate_team2']=     7.194719

 
# Function for adding death over scoring for team1 and team2
def add_death_over_strike_rate(): 
 train_matches.loc[train_matches.team1=='Team1','death_over_scoring_rate_team1']=     8.594017
 train_matches.loc[train_matches.team1=='Team10','death_over_scoring_rate_team1']=    8.970183
 train_matches.loc[train_matches.team1=='Team11','death_over_scoring_rate_team1']=    5.607143
 train_matches.loc[train_matches.team1=='Team2','death_over_scoring_rate_team1']=     8.819672
 train_matches.loc[train_matches.team1=='Team3','death_over_scoring_rate_team1']=     8.607143
 train_matches.loc[train_matches.team1=='Team4','death_over_scoring_rate_team1']=     7.737903
 train_matches.loc[train_matches.team1=='Team5','death_over_scoring_rate_team1']=     8.549145
 train_matches.loc[train_matches.team1=='Team6','death_over_scoring_rate_team1']=     7.934783
 train_matches.loc[train_matches.team1=='Team7','death_over_scoring_rate_team1']=     7.739224
 train_matches.loc[train_matches.team1=='Team8','death_over_scoring_rate_team1']=     8.294248
 train_matches.loc[train_matches.team1=='Team9','death_over_scoring_rate_team1']=     7.571782
 
 
 train_matches.loc[train_matches.team2=='Team1','death_over_scoring_rate_team2']=     8.594017
 train_matches.loc[train_matches.team2=='Team10','death_over_scoring_rate_team2']=    8.970183
 train_matches.loc[train_matches.team2=='Team11','death_over_scoring_rate_team2']=    5.607143
 train_matches.loc[train_matches.team2=='Team2','death_over_scoring_rate_team2']=     8.819672
 train_matches.loc[train_matches.team2=='Team3','death_over_scoring_rate_team2']=     8.607143
 train_matches.loc[train_matches.team2=='Team4','death_over_scoring_rate_team2']=     7.737903
 train_matches.loc[train_matches.team2=='Team5','death_over_scoring_rate_team2']=     8.549145
 train_matches.loc[train_matches.team2=='Team6','death_over_scoring_rate_team2']=     7.934783
 train_matches.loc[train_matches.team2=='Team7','death_over_scoring_rate_team2']=     7.739224
 train_matches.loc[train_matches.team2=='Team8','death_over_scoring_rate_team2']=     8.294248
 train_matches.loc[train_matches.team2=='Team9','death_over_scoring_rate_team2']=     7.571782
 

# Function for adding columns of winning rate of team1 and team2
def add_winning_percent_cols():
 train_matches.loc[train_matches.team1=='Team1','winning_percent_team1']= 0.435897
 train_matches.loc[train_matches.team1=='Team10','winning_percent_team1']=0.614679
 train_matches.loc[train_matches.team1=='Team11','winning_percent_team1']=0.428571
 train_matches.loc[train_matches.team1=='Team2','winning_percent_team1']= 0.581967
 train_matches.loc[train_matches.team1=='Team3','winning_percent_team1']= 0.285714
 train_matches.loc[train_matches.team1=='Team4','winning_percent_team1']= 0.360656
 train_matches.loc[train_matches.team1=='Team5','winning_percent_team1']= 0.478632
 train_matches.loc[train_matches.team1=='Team6','winning_percent_team1']= 0.495652
 train_matches.loc[train_matches.team1=='Team7','winning_percent_team1']= 0.434783
 train_matches.loc[train_matches.team1=='Team8','winning_percent_team1']= 0.522124
 train_matches.loc[train_matches.team1=='Team9','winning_percent_team1']=0.554455
 
 train_matches.loc[train_matches.team2=='Team1','winning_percent_team2']= 0.435897
 train_matches.loc[train_matches.team2=='Team10','winning_percent_team2']=0.614679
 train_matches.loc[train_matches.team2=='Team11','winning_percent_team2']=0.428571
 train_matches.loc[train_matches.team2=='Team2','winning_percent_team2']= 0.581967
 train_matches.loc[train_matches.team2=='Team3','winning_percent_team2']= 0.285714
 train_matches.loc[train_matches.team2=='Team4','winning_percent_team2']= 0.360656
 train_matches.loc[train_matches.team2=='Team5','winning_percent_team2']= 0.478632
 train_matches.loc[train_matches.team2=='Team6','winning_percent_team2']= 0.495652
 train_matches.loc[train_matches.team2=='Team7','winning_percent_team2']= 0.434783
 train_matches.loc[train_matches.team2=='Team8','winning_percent_team2']= 0.522124
 train_matches.loc[train_matches.team2=='Team9','winning_percent_team2']=0.554455

 
# Function for adding number of wickets taken by team1 and team2 during death overs
def add_wickets_taken_middle_overs_cols():
 train_matches.loc[train_matches.team1=='Team1','wicket_taken_middle_overs_team1']=     2.196581
 train_matches.loc[train_matches.team1=='Team10','wicket_taken_middle_overs_team1']=    2.348624
 train_matches.loc[train_matches.team1=='Team11','wicket_taken_middle_overs_team1']=    2.000000
 train_matches.loc[train_matches.team1=='Team2','wicket_taken_middle_overs_team1']=     2.360656
 train_matches.loc[train_matches.team1=='Team3','wicket_taken_middle_overs_team1']=     1.642857
 train_matches.loc[train_matches.team1=='Team4','wicket_taken_middle_overs_team1']=     2.177419
 train_matches.loc[train_matches.team1=='Team5','wicket_taken_middle_overs_team1']=     2.170940
 train_matches.loc[train_matches.team1=='Team6','wicket_taken_middle_overs_team1']=     2.304348
 train_matches.loc[train_matches.team1=='Team7','wicket_taken_middle_overs_team1']=     2.120690
 train_matches.loc[train_matches.team1=='Team8','wicket_taken_middle_overs_team1']=     2.194690
 train_matches.loc[train_matches.team1=='Team9','wicket_taken_middle_overs_team1']=     2.217822
 
 train_matches.loc[train_matches.team2=='Team1','wicket_taken_middle_overs_team2']=     2.196581
 train_matches.loc[train_matches.team2=='Team10','wicket_taken_middle_overs_team2']=    2.348624
 train_matches.loc[train_matches.team2=='Team11','wicket_taken_middle_overs_team2']=    2.000000
 train_matches.loc[train_matches.team2=='Team2','wicket_taken_middle_overs_team2']=     2.360656
 train_matches.loc[train_matches.team2=='Team3','wicket_taken_middle_overs_team2']=     1.642857
 train_matches.loc[train_matches.team2=='Team4','wicket_taken_middle_overs_team2']=     2.177419
 train_matches.loc[train_matches.team2=='Team5','wicket_taken_middle_overs_team2']=     2.170940
 train_matches.loc[train_matches.team2=='Team6','wicket_taken_middle_overs_team2']=     2.304348
 train_matches.loc[train_matches.team2=='Team7','wicket_taken_middle_overs_team2']=     2.120690
 train_matches.loc[train_matches.team2=='Team8','wicket_taken_middle_overs_team2']=     2.194690
 train_matches.loc[train_matches.team2=='Team9','wicket_taken_middle_overs_team2']=     2.217822
 
# Function for adding number of wickets taken by team1 and team2 during powerplays
def add_wickets_taken_powerplay_cols():
 train_matches.loc[train_matches.team1=='Team1','wicket_taken_powerplay_team1']=     1.487179
 train_matches.loc[train_matches.team1=='Team10','wicket_taken_powerplay_team1']=    1.568807
 train_matches.loc[train_matches.team1=='Team11','wicket_taken_powerplay_team1']=    1.571429
 train_matches.loc[train_matches.team1=='Team2','wicket_taken_powerplay_team1']=     1.598361
 train_matches.loc[train_matches.team1=='Team3','wicket_taken_powerplay_team1']=     1.571429
 train_matches.loc[train_matches.team1=='Team4','wicket_taken_powerplay_team1']=     1.393443
 train_matches.loc[train_matches.team1=='Team5','wicket_taken_powerplay_team1']=     1.384615
 train_matches.loc[train_matches.team1=='Team6','wicket_taken_powerplay_team1']=     1.304348
 train_matches.loc[train_matches.team1=='Team7','wicket_taken_powerplay_team1']=     1.478261
 train_matches.loc[train_matches.team1=='Team8','wicket_taken_powerplay_team1']=     1.460177
 train_matches.loc[train_matches.team1=='Team9','wicket_taken_powerplay_team1']=     1.613861
 
 train_matches.loc[train_matches.team2=='Team1','wicket_taken_powerplay_team2']=    1.487179
 train_matches.loc[train_matches.team2=='Team10','wicket_taken_powerplay_team2']=    1.568807
 train_matches.loc[train_matches.team2=='Team11','wicket_taken_powerplay_team2']=    1.571429
 train_matches.loc[train_matches.team2=='Team2','wicket_taken_powerplay_team2']=     1.598361
 train_matches.loc[train_matches.team2=='Team3','wicket_taken_powerplay_team2']=     1.571429
 train_matches.loc[train_matches.team2=='Team4','wicket_taken_powerplay_team2']=     1.393443
 train_matches.loc[train_matches.team2=='Team5','wicket_taken_powerplay_team2']=     1.384615
 train_matches.loc[train_matches.team2=='Team6','wicket_taken_powerplay_team2']=     1.304348
 train_matches.loc[train_matches.team2=='Team7','wicket_taken_powerplay_team2']=     1.478261
 train_matches.loc[train_matches.team2=='Team8','wicket_taken_powerplay_team2']=     1.460177
 train_matches.loc[train_matches.team2=='Team9','wicket_taken_powerplay_team2']=     1.613861

 
# Function for adding new columns derived from train_deliveries
def add_relevant_columns():
 train_matches['batting_strike_rate_team1'] = 'abc'
 train_matches['batting_strike_rate_team2'] = 'def'
 train_matches['winning_percent_team1']='ghi'
 train_matches['winning_percent_team2']='kkr'
 train_matches['bowling_economy_rate_team1']='csd'
 train_matches['bowling_economy_rate_team2']='pkd'
 train_matches['power_play_scoring_rate_team1']='abc'
 train_matches['power_play_scoring_rate_team2']='abc'
 train_matches['death_over_scoring_rate_team1']='abc'
 train_matches['death_over_scoring_rate_team2']='abc'
 train_matches['wicket_taken_powerplay_team1']='abc'
 train_matches['wicket_taken_powerplay_team2']='abc'
 

################### Helper calculations for assigning values to different methods#########################  

# Calculating of winning percentage(training data)
winning_percentage=(train_matches.groupby('winner').winner.count().sort_index( level='winner',ascending=True))/(train_matches.groupby('team1').team1.count()+train_matches.groupby('team2').team2.count())

# Total match played by each team
total_matches_played_by_team=train_matches.groupby('team1').team1.count()+train_matches.groupby('team2').team2.count()
total_matches_played_by_team=total_matches_played_by_team.sort_index( level='team1',ascending=True)
'''total_matches_played_by_team'''

# Total runs scored by teams  (training data)
total_runs_by_team=train_deliveries.groupby('batting_team').total_runs.sum()
total_runs_by_team=total_runs_by_team.sort_index( level='batting_team',ascending=True)

# Batting strike rate of teams (training data)
batting_strike_rate_of_teams=total_runs_by_team/total_matches_played_by_team


# Number of overs bowled by each team (training data)
bowling_figures=train_deliveries.groupby(['match_id','bowling_team']).over.agg([max])
no_of_overs_bowled_by_each_team= bowling_figures.groupby('bowling_team').sum()
'''no_of_overs_bowled_by_each_team'''

# Total_runs_given_by_bowling_team (training data)
total_runs_given_by_bowling_team=train_deliveries.groupby('bowling_team').total_runs.sum()


#type(total_runs_given_by_bowling_team)
# Creating series for number of overs bowled by each teams(training data)

no_of_overs_bowled_by_team = pd.Series([2279,2093,262,2363,268,1203,2264,2193,2200,2157,1945], index=['Team1','Team10','Team11','Team2','Team3','Team4','Team5','Team6','Team7','Team8','Team9'])
# Calculating economy rate of bowling team(training data)
economy_rate_bowling_team =total_runs_given_by_bowling_team/no_of_overs_bowled_by_team
'''economy_rate_bowling_team'''


# Wickets taken by teams during middle overs
middle_overs = [7,8,9,10,11,12,13,14,15]
middle_over_stats=train_deliveries.loc[(train_deliveries['over'] ).isin(middle_overs)]

wickets_fall_middle_overs = middle_over_stats.loc[(middle_over_stats.dismissal_kind.notnull())]

#Calculating number of wickets taken  by teams during middle overs 
wickets_fall_middle_overs.groupby('bowling_team').bowling_team.count()/total_matches_played_by_team

#Calculating number of wickets taken  by teams during power plays 
powerplay_overs = [1,2,3,4,5,6]
powerplay_wicket_taken_stats=train_deliveries.loc[(train_deliveries['over'] ).isin(powerplay_overs)]

wickets_fall_in_powerplay = powerplay_wicket_taken_stats.loc[(powerplay_wicket_taken_stats.dismissal_kind.notnull())]

wickets_fall_in_powerplay_by_team = wickets_fall_in_powerplay.groupby('bowling_team').bowling_team.count()
#Calculating number of wickets taken  by teams during powerplay
wickets_fall_in_powerplay_by_team/total_matches_played_by_team

################### Helper calculations for assigning values to different methods#########################




#############################Creating models and evaluation of performance###################################


## Importing Dataset and modules ##
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

import os
print(os.listdir("../input"))

# Any results you write to the current directory are saved as output.

train_matches = pd.read_csv('../input/Trainmatches.csv')
test_matches = pd.read_csv('../input/Testmatches.csv')
train_deliveries = pd.read_csv('../input/TrainDeliveries.csv')
test_deliveries = pd.read_csv('../input/TestDeliveries.csv')
submission_template = pd.read_csv('../input/submission.csv') 


##Calling relevant methods for adding new columns to training dataset##

add_relevant_columns()
add_bowling_economy_rate_cols()
add_power_play_strike_rate_cols()
add_death_over_strike_rate()
add_winning_percent_cols()
add_batting_strike_rate_cols()
add_wickets_taken_powerplay_cols()
add_wickets_taken_middle_overs_cols()


## Adding column of interest to training data##
#Droping rows where any cell values is null
train_matches=train_matches.dropna(axis=0,how='any')

columns_of_interst=['city', 'team1', 'team2', 'toss_winner','toss_decision',  'venue',
                    'batting_strike_rate_team1','batting_strike_rate_team2','winning_percent_team1','winning_percent_team2','bowling_economy_rate_team1','bowling_economy_rate_team2','death_over_scoring_rate_team1','death_over_scoring_rate_team2','power_play_scoring_rate_team1','power_play_scoring_rate_team2','wicket_taken_powerplay_team1','wicket_taken_powerplay_team2','wicket_taken_middle_overs_team1','wicket_taken_middle_overs_team2']
train_matches[['batting_strike_rate_team1','batting_strike_rate_team2','winning_percent_team2','winning_percent_team1','bowling_economy_rate_team1','bowling_economy_rate_team2','death_over_scoring_rate_team1','death_over_scoring_rate_team2','power_play_scoring_rate_team1','power_play_scoring_rate_team2','wicket_taken_powerplay_team1','wicket_taken_powerplay_team2','wicket_taken_middle_overs_team1','wicket_taken_middle_overs_team2']].apply(pd.to_numeric)
X=train_matches[columns_of_interst]


Y=train_matches['winner']



X = pd.get_dummies(X)

# Splitting dataset into training and test set
from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)


from sklearn.svm import SVC
import sklearn
#from sklearn.svm import score 
model = SVC(kernel='rbf', random_state=0, gamma=.10, C=1.0) #select the algorithm
model.fit(X_train,y_train) # we train the algorithm with the training data and the training output
prediction=model.predict(X_test) #now we pass the testing data to the trained algorithm

print('The accuracy of the svm classifier on training data is {:.2f} out of 1'.format(model.score(X_train, y_train)))

print('The accuracy of the svm classifier on test data is {:.2f} out of 1'.format(model.score(X_test, y_test)))



my_submission = pd.DataFrame({'real': y_test, 'SalePrice': prediction})
# you could use any filename. We choose submission here
my_submission.to_csv('Resubmission_SVC.csv', index=False)



from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier(n_neighbors=7, p=2, metric='minkowski')
model.fit(X_train, y_train)

print('The accuracy of the knn classifier is {:.2f} out of 1 on training data'.format(model.score(X_train, y_train)))
print('The accuracy of the knn classifier is {:.2f} out of 1 on test data'.format(model.score(X_test, y_test)))

my_submission = pd.DataFrame({'real': y_test, 'SalePrice': prediction})
# you could use any filename. We choose submission here
my_submission.to_csv('Resubmission_KNN.csv', index=False)



import xgboost as xgb

xgb_clf = xgb.XGBClassifier(learning_rate=0.01,num_boost_round = 2000)
xgb_clf = xgb_clf.fit(X_train, y_train)
prediction=xgb_clf.predict(X_test) #now we pass the testing data to the trained algorithm

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,prediction)

'''my_submission = pd.DataFrame({'real': y_test, 'SalePrice': prediction})
# you could use any filename. We choose submission here
my_submission.to_csv('Resubmission_xgb.csv', index=False)'''
print('The accuracy of the xgb classifier is {:.2f} out of 1 on training data'.format(xgb_clf.score(X_train, y_train)))
print('The accuracy of the xgb classifier is {:.2f} out of 1 on test data'.format(xgb_clf.score(X_test, y_test)))
